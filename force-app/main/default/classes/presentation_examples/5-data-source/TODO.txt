Example test:

    OpportunityProductCanceller
    It uses an OpportunityProductDataSource

    Configure the DataSource with the Opportunity Ids you want the Products for, call getProducts

    ProductCanceller will:
        Loop over the products, check that they're not already fulfilled, and cancel the ones that aren't
        Have a method to allow you to get back the ones that need to be updated.

    This kind of thing is a common pattern:
        Splits:
            Data retrieval
            Data processing
            DML
        The thing on the outside controls what gets processed
        The processor does the processing
        The thing on the outside controls the DML


Example test - Case Milestone Closer - A brief aside...

    Not bad - but really useful when you get to something like this.

    A similar pattern, only now it's a Case Milestone closer

    When a Case closes, before the Case Milestones are removed from sight, we want to close them.

    So we write a processor to manage that.

    Only thing is, we can't perform Inserts on Case Milestones, so getting test data into the system is VERY hard.

    So instead, we do the same thing, and create a Mock Datasource

    But then we find that we can't create them in Memory either - most of the fields are non-writable - and actually, that's true of any formula field, rollup summary, or child relationship records.

    So what do we do?

    Now we introduce SObject Fabrication...

